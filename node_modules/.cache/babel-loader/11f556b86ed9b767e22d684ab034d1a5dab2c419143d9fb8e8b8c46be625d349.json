{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, createCommentVNode as _createCommentVNode, withModifiers as _withModifiers, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-96935758\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"main\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"This is a to do list page\", -1 /* HOISTED */));\nconst _hoisted_3 = [\"disabled\"];\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"form\", null, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    placeholder: \"Enter a task to be done\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.taskDesc = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.taskDesc]]), _createCommentVNode(\" \\\".prevent\\\" is used to prevent reloading the page when the button is clicked\"), _createCommentVNode(\" :disabled=\\\"!taskDesc\\\" to disable the \\\"Add Task\\\" button if there is no text entered \"), _createElementVNode(\"button\", {\n    class: \"add-task\",\n    onClick: _cache[1] || (_cache[1] = _withModifiers((...args) => $options.addTask && $options.addTask(...args), [\"prevent\"])),\n    disabled: !_ctx.taskDesc\n  }, \"Add task\", 8 /* PROPS */, _hoisted_3), _createCommentVNode(\" :v-if=\\\"tasks.length > 1\\\" is used to control the visibility of this button, i.e., it will appear when there is more than one task \"), _ctx.tasks.length > 1 ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    class: \"delete-all-tasks\",\n    onClick: _cache[2] || (_cache[2] = _withModifiers((...args) => $options.deleteAll && $options.deleteAll(...args), [\"prevent\"]))\n  }, \"Delete all\")) : _createCommentVNode(\"v-if\", true)]), _createCommentVNode(\" \\n    The v-for directive requires a special syntax in the form of \\\"item\\\" in \\\"items\\\", \\n    where \\\"items\\\" is the source data array and \\\"item\\\" is an alias for the array element being iterated on.\\n    You do not need to define the item (e.g., \\\"task\\\" in our case), JS/Vue will know it is a single array element being iterated on.\\n    To reuse and reorder existing elements, you need to provide \\\"a unique key attribute\\\" for each item (e.g., :key=\\\"index\\\").\\n\\n    However, using the following \\\"v-for\\\", will not work as expected for us, try to figure out why\\n    \\n    <div class=\\\"tasks-list\\\" v-for=\\\"task in tasks\\\" :key=\\\"task.desc\\\">  \\n    \"), _createCommentVNode(\" Try to remove \\\":key=\\\"index\\\"\\\", and check what kind of error you will get \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.tasks, (task, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"tasks-list\",\n      key: index\n    }, [_createCommentVNode(\" \\n    \\\"task.done = !task.done\\\"\\\" to toggle between these two states\\\"\\n    \\n    \\\":style=\\\"{'...\\\" - If task.done is \\\"true\\\", the class \\\"clicked\\\" will apply, which will change the text style  to line-through. \\n    Otherwise, it will the class \\\"clicked\\\", which will remove the text-decoration \\n    This is a ternary operator, you should remember how it works\\\" \\n    \"), _createElementVNode(\"div\", {\n      class: _normalizeClass([\"task-box\", task.done ? 'clicked' : '']),\n      onClick: $event => task.done = !task.done\n    }, _toDisplayString(task.desc), 11 /* TEXT, CLASS, PROPS */, _hoisted_4), _createElementVNode(\"div\", {\n      class: \"delete\",\n      onClick: $event => $options.deleteTask(index)\n    }, \"Delete\", 8 /* PROPS */, _hoisted_5)]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"mappings":";;;EAEKA,KAAK,EAAC;AAAM;gEAEjBC,oBAAkC,YAA9B,2BAAyB;;;;;uBAF7BC,oBAqCM,OArCNC,UAqCM,GAnCNC,UAAkC,EAChCH,oBAOO,+BANLA,oBAA6E;IAAtEI,IAAI,EAAC,MAAM;IAACC,WAAW,EAAC,yBAAyB;+DAAUC,aAAQ;iDAARA,aAAQ,KAC1EC,qGAAmF,EACnFA,+GAA2F,EAC3FP,oBAAyF;IAAjFD,KAAK,EAAC,UAAU;IAAES,OAAK,wDAAUC,6CAAO;IAAGC,QAAQ,GAAGJ;KAAU,UAAQ,8BAChFC,2JAAyI,EAClGD,UAAK,CAACK,MAAM,sBAAnDV,oBAAuG;;IAA/FF,KAAK,EAAC,kBAAkB;IAA0BS,OAAK,wDAAUC,iDAAS;KAAE,YAAU,0CAG9FF,2qBASG,EAEHA,oGAAgF,qBAChFN,oBAWMW,6BAX0CN,UAAK,GAArBO,IAAI,EAAEC,KAAK;yBAA3Cb,oBAWM;MAXDF,KAAK,EAAC,YAAY;MAAiCgB,GAAG,EAAED;QAE7DP,gZAMG,EACHP,oBAA8G;MAAzGD,KAAK,mBAAC,UAAU,EAAyCc,IAAI,CAACG,IAAI;MAAhDR,OAAK,YAAEK,IAAI,CAACG,IAAI,IAAIH,IAAI,CAACG;wBAA4CH,IAAI,CAACI,IAAI,6CACrGjB,oBAA2D;MAAtDD,KAAK,EAAC,QAAQ;MAAES,OAAK,YAAEC,mBAAU,CAACK,KAAK;OAAG,QAAM","names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","type","placeholder","_ctx","_createCommentVNode","onClick","$options","disabled","length","_Fragment","task","index","key","done","desc"],"sourceRoot":"","sources":["/Users/anhelinalohvina/homework3wad/src/components/ToDoList.vue"],"sourcesContent":["<template>\n\n<div class=\"main\">\n\n<h1>This is a to do list page</h1>\n  <form>\n    <input type=\"text\" placeholder=\"Enter a task to be done\" v-model=\"taskDesc\"/>\n    <!-- \".prevent\" is used to prevent reloading the page when the button is clicked-->\n    <!-- :disabled=\"!taskDesc\" to disable the \"Add Task\" button if there is no text entered -->\n    <button class=\"add-task\" @click.prevent=\"addTask\" :disabled=\"!taskDesc\">Add task</button>\n    <!-- :v-if=\"tasks.length > 1\" is used to control the visibility of this button, i.e., it will appear when there is more than one task -->\n    <button class=\"delete-all-tasks\" v-if=\"tasks.length > 1\" @click.prevent=\"deleteAll\">Delete all</button>\n  </form>\n  \n    <!-- \n    The v-for directive requires a special syntax in the form of \"item\" in \"items\", \n    where \"items\" is the source data array and \"item\" is an alias for the array element being iterated on.\n    You do not need to define the item (e.g., \"task\" in our case), JS/Vue will know it is a single array element being iterated on.\n    To reuse and reorder existing elements, you need to provide \"a unique key attribute\" for each item (e.g., :key=\"index\").\n\n    However, using the following \"v-for\", will not work as expected for us, try to figure out why\n    \n    <div class=\"tasks-list\" v-for=\"task in tasks\" :key=\"task.desc\">  \n    -->\n\n    <!-- Try to remove \":key=\"index\"\", and check what kind of error you will get -->\n    <div class=\"tasks-list\" v-for=\"(task, index) in tasks\" :key=\"index\"> \n  \n    <!-- \n    \"task.done = !task.done\"\" to toggle between these two states\"\n    \n    \":style=\"{'...\" - If task.done is \"true\", the class \"clicked\" will apply, which will change the text style  to line-through. \n    Otherwise, it will the class \"clicked\", which will remove the text-decoration \n    This is a ternary operator, you should remember how it works\" \n    -->\n    <div class=\"task-box\" @click=\"task.done = !task.done\" :class=\"task.done? 'clicked' : ''\">{{ task.desc }}</div>\n    <div class=\"delete\" @click=\"deleteTask(index)\">Delete</div>\n    </div> \n    \n</div>\n\n</template>\n\n<script>\n\nexport default {\nname: \"ToDoList\",\n\ndata: function() {\nreturn {\n    tasks: [ \n      {desc: \"Register my team in Moodle\", done: true},\n      {desc: \"Finish the homework\", done: false},\n      {desc: \"Submit the homework though Moodle\" , done: false},\n      {desc: \"Discuss the homework in Lab\" , done: false},\n        ],\n    taskDesc: \"\",\n  }},\n\nmethods: {\n    addTask: function() {\n    /*   We are just adding a new entery to the list (array), each object has two data (lierals) \n      desc (text description) and done (true or false). When pressing on the \"Add task button\", \n      the text within the input filed will be assigned to the desc of the new object to be added, \n      and its done value will be set to false because it is not logical to add a task, which we have already done\n    */  \n      this.tasks.push({desc: this.taskDesc, done: false });\n    /* to empty the input after adding the task in the input filed to the list (array) of the to do list */\n      this.taskDesc = \"\";\n    },\n    /* You sould know what array.splice(index, 1) do */\n    deleteTask: function(index) {\n      this.tasks.splice(index, 1);\n    },\n    /* Empty the list (array) of the to do list  */\n    deleteAll: function() {\n      this.tasks = [];\n    }\n  }  \n\n}; \n\n</script>\n\n<style scoped>\n\n\n\n* {\n  box-sizing: border-box;\n}\nh1{\n  color: #21b813;\n}\n\n.clicked{\n  text-decoration: line-through;\n  color: #135ab8;\n}\n.main {\n  text-align: center;\n}\n.main form {\n  margin: 20px auto 10px;\n  width: 500px;\n  overflow: hidden;\n\n}\n.main form input {\n  background-color: #f7f7f7;\n  border: 1px solid #eee;\n  margin-bottom: 15px;\n  width: calc(100% - 210px);\n  height: 46px;\n  padding: 10px;\n  float: left;\n}\n.main form input:focus {\n  outline: none;\n}\n.main form button {\n  width: 90px;\n  height: 46px;\n  padding: 10px;\n  background-color: #2196f3;\n  color: #fff;\n  border-color: transparent;\n  cursor: pointer;\n  float: left;\n  margin-left: 5px;\n  font-size: 16px;\n  border-radius: 20px;\n}\n.main form button:disabled {\n  opacity: 0.4;\n  cursor: no-drop;\n}\n.main form button:focus {\n  outline: none;\n}\n.main form button.delete-all-tasks {\n  width: 110px;\n  background-color: #cc372c;\n  color: #fff;\n  border-color: transparent;\n  font-size: 16px;\n  cursor: pointer;\n  height: 48px;\n  border-radius: 20px;\n}\n\n.main form button.delete-all-tasks:hover {\n    background-color: #6e1812;\n}\n.main .tasks-list {\n  width: 500px;\n  margin: 0 auto;\n}\n.main .tasks-list .task-box {\n  background-color: rgba(139, 195, 74, 0.25);\n  padding: 15px;\n  text-align: left;\n  margin-bottom: 15px;\n  margin-right: 5px;\n  width: calc(100% - 86px);\n  cursor: pointer;\n  float: left;\n}\n.main .tasks-list .delete {\n  float: right;\n  width: 80px;\n  background-color: #cc372c;\n  color: #fff;\n  border-color: transparent;\n  padding: 1px 10px;\n  cursor: pointer;\n  height: 48px;\n  line-height: 51px;\n  border-radius: 20px;\n}\n\n.main .tasks-list .delete:hover {\n    background-color: #6e1812;\n}\n\n\n</style>\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}